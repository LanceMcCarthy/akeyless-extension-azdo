jest.mock('akeyless');
jest.mock('../src/helpers');

const akeyless = require('akeyless');
const helpers = require('../src/helpers');
const auth = require('../src/auth');

describe('auth.js', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    console.log = jest.fn(); // Mock console.log
  });

  describe('getAkeylessToken', () => {
    test('should successfully authenticate and return token', async () => {
      // Arrange
      const mockApi = {
        auth: jest.fn().mockResolvedValue({ token: 'test-akeyless-token' })
      };
      const accessId = 'p-12345';
      const azureJwt = 'test-jwt-token';
      const authBody = { 'access-type': 'jwt', 'access-id': accessId, jwt: azureJwt };

      akeyless.Auth.constructFromObject = jest.fn().mockReturnValue(authBody);

      // Act
      const result = await auth.getAkeylessToken(mockApi, accessId, azureJwt);

      // Assert
      expect(akeyless.Auth.constructFromObject).toHaveBeenCalledWith({
        'access-type': 'jwt',
        'access-id': accessId,
        jwt: azureJwt
      });
      expect(mockApi.auth).toHaveBeenCalledWith(authBody);
      expect(result).toBe('test-akeyless-token');
      expect(console.log).toHaveBeenCalledWith('🙏 Requesting access token from akeyless...');
      expect(console.log).toHaveBeenCalledWith('👍 Received authentication token from akeyless!');
    });

    test('should fail when accessId is undefined', async () => {
      // Arrange
      const mockApi = { auth: jest.fn() };
      const azureJwt = 'test-jwt-token';
      helpers.generalFail = jest.fn();

      // Act
      await auth.getAkeylessToken(mockApi, undefined, azureJwt);

      // Assert
      expect(helpers.generalFail).toHaveBeenCalledWith(
        'You must provide the access id for your akeyless Auth Method. For instructions, visit https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md.'
      );
    });

    test('should fail when azureJwt is undefined', async () => {
      // Arrange
      const mockApi = { auth: jest.fn() };
      const accessId = 'p-12345';
      helpers.generalFail = jest.fn();

      // Act
      await auth.getAkeylessToken(mockApi, accessId, undefined);

      // Assert
      expect(helpers.generalFail).toHaveBeenCalledWith(
        'You must provide a JWT token for authentication, this is generated by a Service connection and Azure CLI. For instructions, visit https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md.'
      );
    });

    test('should handle authentication API error', async () => {
      // Arrange
      const mockApi = {
        auth: jest.fn().mockRejectedValue(new Error('Auth failed'))
      };
      const accessId = 'p-12345';
      const azureJwt = 'test-jwt-token';
      const authBody = { 'access-type': 'jwt', 'access-id': accessId, jwt: azureJwt };

      akeyless.Auth.constructFromObject = jest.fn().mockReturnValue(authBody);
      helpers.generalFail = jest.fn();

      // Act
      await auth.getAkeylessToken(mockApi, accessId, azureJwt);

      // Assert
      expect(helpers.generalFail).toHaveBeenCalledWith(
        'Failed to authenticate with Akeyless, please verify you have set up your Auth Method and/or Access Role properly. \r\nError: Error: Auth failed.'
      );
    });

    test('should handle empty token response', async () => {
      // Arrange
      const mockApi = {
        auth: jest.fn().mockResolvedValue({}) // No token in response
      };
      const accessId = 'p-12345';
      const azureJwt = 'test-jwt-token';
      const authBody = { 'access-type': 'jwt', 'access-id': accessId, jwt: azureJwt };

      akeyless.Auth.constructFromObject = jest.fn().mockReturnValue(authBody);
      helpers.generalFail = jest.fn();

      // Act
      await auth.getAkeylessToken(mockApi, accessId, azureJwt);

      // Assert
      expect(helpers.generalFail).toHaveBeenCalledWith(
        'Unexpected failure. The akeyless token is empty even though you\'re authenticated, please double check the inputs or open an issue at https://github.com/LanceMcCarthy/akeyless-extension-azdo.'
      );
    });
  });
});
