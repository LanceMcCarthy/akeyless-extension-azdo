const SDK = require('azure-pipelines-task-lib/task');
const akeyless = require('akeyless');

async function run() {
  // *********************************************** //
  // **** Phase 1 - Get inputs and validate ******** //
  // *********************************************** //

  const accessId = SDK.getInput('accessId', true);
  const azureJwt = SDK.getInput('azureJwt', true);
  const staticSecrets = SDK.getInput('staticSecrets');
  const dynamicSecrets = SDK.getInput('dynamicSecrets');
  let apiUrl = SDK.getInput('apiUrl');

  console.log(`Validating inputs...`);

  if (accessId === undefined) {
    throw new Error('You must provide the access id for your akeyless Auth Method. For instructions, visit https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md.');
  }

  if (azureJwt === undefined) {
    throw new Error('You must provide a JWT token for authentication, this is generated by a Service connection and Azure CLI. For instructions, visit https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md.');
  }

  if (apiUrl === undefined) {
    apiUrl = 'https://api.akeyless.io';
  }

  // *********************************************** //
  // **** Phase 2 - Get akeyless authentication **** //
  // *********************************************** //

  console.log(`Authenticating with akeyless...`);

  //Akeyless SDK documentation https://github.com/akeylesslabs/akeyless-javascript
  const client = new akeyless.ApiClient();
  client.basePath = apiUrl;
  const api = new akeyless.V2Api(client);

  let akeylessToken = undefined;

  try {
    const opts = {'access-type': 'jwt', 'access-id': accessId, jwt: azureJwt};
    const body = akeyless.Auth.constructFromObject(opts);

    // get the akeyless token
    const data = await api.auth(body);
    akeylessToken = data.token;

    console.log('Received a token from akeyless, fetching secrets...');
  } catch (error) {
    SDK.setResult(SDK.TaskResult.Failed, `Failed to authenticate with Akeyless, please verify you have set up your Auth Method and/or Access Role properly. \r\nError: ${error}.`);
  }

  if (akeylessToken === undefined) {
    SDK.setResult(SDK.TaskResult.Failed, `Unexpected failure, cannot continue. The akeyless token is empty even though you're authenticated, please double check the inputs or open an issue at https://github.com/LanceMcCarthy/akeyless-extension-azdo.`);
  }

  // *********************************************** //
  // ***** Phase 3 - Fetch akeyless secrets ******** //
  // *********************************************** //

  // ************ static secrets *************** //

  if (staticSecrets) {
    console.log(`[Static Secrets] Fetching static secrets...`);

    //Parse input
    const staticSecretsDictionary = JSON.parse(staticSecrets);

    if (staticSecretsDictionary === undefined) {
      SDK.setResult(SDK.TaskResult.Failed, `Something went wrong during input deserialization of staticSecrets. Check the JSON string is in the expected format of a dictionary, see docs for examples https://github.com/LanceMcCarthy/akeyless-extension-azdo`);
    }

    // GET SECRETS
    for (const akeylessPath of Object.keys(staticSecretsDictionary)) {
      // Get the name to be used for the output variable
      let variableName = staticSecretsDictionary[akeylessPath];

      // Let the user know we are attempting to get (this helps significantly when troubleshooting a problem).
      console.log(`Requesting '${akeylessPath}' from akeyless...`);

      // Prepare request args and fetch secret
      const statOpts = akeyless.GetSecretValue.constructFromObject({token: akeylessToken, names: [akeylessPath]});

      // prettier-ignore
      api.getSecretValue(statOpts).then(secretResult => {
        success(akeylessPath, variableName, secretResult[akeylessPath]);
      })
      .catch(error => {
        fail(akeylessPath, JSON.stringify(error));
      });
    }
  } else {
    console.log(`[Static Secrets] Skipped, no static secrets were requested.`);
  }

  // ********** dynamic secrets *************** //

  if (dynamicSecrets) {
    console.log(`[Dynamic Secrets] Fetching dynamic secrets...`);

    // Parse input
    let secretsDictionary = (secretsDictionary = JSON.parse(dynamicSecrets));

    if (secretsDictionary === undefined) {
      SDK.setResult(SDK.TaskResult.Failed, `Something went wrong during input deserialization of dynamicSecrets. Check the JSON string is in the expected format of a dictionary, see docs for examples https://github.com/LanceMcCarthy/akeyless-extension-azdo`);
    }

    // GET SECRETS
    for (const akeylessPath of Object.keys(secretsDictionary)) {
      // Get user's desired name for the variable
      let variableName = secretsDictionary[akeylessPath];

      // Let the user know we are attempting to get (this helps significantly when troubleshooting a problem).
      console.log(`Requesting '${akeylessPath}' from akeyless...`);

      // Prepare request args and fetch the secret
      const dynOpts = akeyless.GetSecretValue.constructFromObject({token: akeylessToken, names: [akeylessPath]});

      // prettier-ignore
      api.getSecretValue(dynOpts).then(secretResult => {
        success(akeylessPath, variableName, secretResult[akeylessPath]);
      })
      .catch(error => {
        fail(akeylessPath, JSON.stringify(error));
      });
    }
  } else {
    console.log(`[Dynamic Secrets] Skipped, no dynamic secrets were requested.`);
  }
}

function success(path, outputName, value) {
  SDK.setVariable(outputName, value, true, true);

  console.log(`✅ Success! '${path}' was fetched, the value will be available in the '${outputName}' output variable. ⚠️ Note: Make sure you've set a 'name' (YAML pipelines) or a 'Reference Name' (classic pipelines) to access the value in subsequent steps..`);
}

function fail(path, errorText) {
  // Fail if there was troubvle getting any expected secret
  SDK.setResult(SDK.TaskResult.Failed, `Could not fetch '${path}'. Error: ${errorText}.`);
}

exports.run = run;

if (require.main === module) {
  try {
    SDK.debug('Starting main run');
    run();
  } catch (e) {
    SDK.debug(e.stack);
    SDK.error(e.message);
    SDK.setResult(SDK.TaskResult.Failed, e.message);
  }
}
