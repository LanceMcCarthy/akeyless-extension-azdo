const SDK = require('azure-pipelines-task-lib/task');
const akeyless = require('akeyless');

async function run() {
  // *********************************************** //
  // **** Phase 1 - Get inputs and validate ******** //
  // *********************************************** //

  const accessId = SDK.getInput('accessId', true);
  const azureJwt = SDK.getInput('azureJwt', true);
  const staticSecrets = SDK.getInput('staticSecrets');
  const dynamicSecrets = SDK.getInput('dynamicSecrets');
  const requestTimeout = SDK.getInput('timeout');
  const apiUrl = SDK.getInput('apiUrl');

  console.log(`üîî Important: To reference outputs, the task needs a 'name' (or a 'Reference Name' for classic pipelines). See this real-world example https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/examples.md#conclusion--real-world-example.`);

  console.log(`Validating inputs...`);

  if (accessId === undefined) {
    generalFail('You must provide the access id for your akeyless Auth Method. For instructions, visit https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md.');
  }

  if (azureJwt === undefined) {
    generalFail('You must provide a JWT token for authentication, this is generated by a Service connection and Azure CLI. For instructions, visit https://github.com/LanceMcCarthy/akeyless-extension-azdo/blob/main/docs/getting-started.md.');
  }

  // *********************************************** //
  // **** Phase 2 - Get akeyless authentication **** //
  // *********************************************** //

  //Akeyless SDK documentation https://github.com/akeylesslabs/akeyless-javascript

  console.log(`Authenticating with akeyless...`);

  const client = new akeyless.ApiClient();
  client.basePath = apiUrl;
  const api = new akeyless.V2Api(client);

  let akeylessToken = undefined;

  try {
    const opts = {'access-type': 'jwt', 'access-id': accessId, jwt: azureJwt};
    const body = akeyless.Auth.constructFromObject(opts);

    // get the akeyless token
    const data = await api.auth(body);
    akeylessToken = data.token;

    console.log('Received a token from akeyless, fetching secrets...');
  } catch (error) {
    generalFail(`Failed to authenticate with Akeyless, please verify you have set up your Auth Method and/or Access Role properly. \r\nError: ${error}.`);
  }

  if (akeylessToken === undefined) {
    generalFail(`Unexpected failure. The akeyless token is empty even though you're authenticated, please double check the inputs or open an issue at https://github.com/LanceMcCarthy/akeyless-extension-azdo.`);
  }

  // *********************************************** //
  // ***** Phase 3 - Fetch akeyless secrets ******** //
  // *********************************************** //

  // ------------ static secrets ------------ //

  if (staticSecrets) {
    console.log(`üîì[Static Secrets] Processing static secrets... '${staticSecrets}'`);

    const staticSecretsDictionary = JSON.parse(staticSecrets);

    if (staticSecretsDictionary === undefined) {
      generalFail(`Something went wrong during deserialization of staticSecrets input. Check the JSON string is in the format of a dictionary, see docs for examples https://github.com/LanceMcCarthy/akeyless-extension-azdo`);
    }

    // IMPORTANT - Uses the GetSecretValue endpoint
    // https://github.com/akeylesslabs/akeyless-javascript/blob/master/docs/V2Api.md#getSecretValue
    // https://github.com/akeylesslabs/akeyless-javascript/blob/master/docs/GetSecretValue.md
    // names: is an array of paths to fetch
    // secretResult: is a dictionary of key/value pairs of akeyless-path:secret-value

    const statOpts = akeyless.GetSecretValue.constructFromObject({
      token: akeylessToken,
      names: Object.keys(staticSecretsDictionary)
    });

    // https://github.com/akeylesslabs/akeyless-javascript/blob/master/docs/V2Api.md#getDynamicSecretValue
    // prettier-ignore
    api.getSecretValue(statOpts).then(secretResult => {
      // iterate over the returned dictionary of all static secrets
      for (const [akeylessPath, secretValue] of Object.entries(secretResult)) {
        // output var name, secret value, akeyless path
        success(staticSecretsDictionary[akeylessPath], secretValue, akeylessPath);
      }
    })
    .catch(error => {
      fetchFail(akeylessPath, JSON.stringify(error));
    });
  } else {
    console.log(`üîê [Static Secrets] Skipped, no static secrets were requested.`);
  }

  // ----------- dynamic secrets ------------ //

  if (dynamicSecrets) {
    console.log(`üîì [Dynamic Secrets] Processing dynamic secrets... '${dynamicSecrets}'`);

    // Parse input
    let dynamicSecretsDictionary = JSON.parse(dynamicSecrets);

    if (dynamicSecretsDictionary === undefined) {
      generalFail(`Something went wrong during deserialization of dynamicSecrets input. Check the JSON string is in the format of a dictionary, see docs for examples https://github.com/LanceMcCarthy/akeyless-extension-azdo`);
    }

    // GET DYNAMIC SECRETS
    // Iterate over the dictionary and get each dynamic secret. The keys are the akeyless paths, the values are the desired output variable names
    for (const key of Object.keys(dynamicSecretsDictionary)) {
      const akeylessPath = key;
      const outputVar = dynamicSecretsDictionary[akeylessPath];

      // Let the user know we are attempting to get (this helps significantly when troubleshooting a problem).
      console.log(`Fetching '${akeylessPath}' from akeyless for use in '${outputVar}'...`);

      // IMPORTANT: Uses GetDynamicSecretValue endpoint
      // https://github.com/akeylesslabs/akeyless-javascript/blob/master/docs/V2Api.md#getDynamicSecretValue
      // https://github.com/akeylesslabs/akeyless-javascript/blob/master/docs/GetDynamicSecretValue.md
      // name: is a single akeyless path
      // secretResult: a single secret value

      const dynOpts = akeyless.GetDynamicSecretValue.constructFromObject({
        token: akeylessToken,
        name: akeylessPath
      });

      // prettier-ignore
      api.getDynamicSecretValue(dynOpts).then(secretResult => {
        // Pass the entire secretResult object, as it is a single secret value
        // output var name, secret value, akeyless path
        success(outputVar, secretResult, akeylessPath);
      })
      .catch(error => {
        fetchFail(akeylessPath, JSON.stringify(error));
      });
    }
  } else {
    console.log(`üîê [Dynamic Secrets] Skipped, no dynamic secrets were requested.`);
  }
}

function success(outputName, value, akeylessPath) {
  if (value === undefined) {
    console.log(`‚ö†Ô∏è [Warning] '${akeylessPath}' has no value, please verify the secret is properly configured in akeyless.`);
  }

  SDK.setVariable(outputName, value, true, true);

  console.log(`‚úÖ Success! '${akeylessPath}' is set to the '${outputName}' output variable.`);
}

function fetchFail(akeylessPath, errorText) {
  SDK.setResult(SDK.TaskResult.Failed, `Could not fetch '${akeylessPath}'. Error: ${errorText}.`);
}

function generalFail(message) {
  SDK.setResult(SDK.TaskResult.Failed, message);
}

exports.run = run;

if (require.main === module) {
  try {
    SDK.debug('Starting main run');
    run();
  } catch (e) {
    SDK.debug(e.stack);
    SDK.error(e.message);
    SDK.setResult(SDK.TaskResult.Failed, e.message);
  }
}
