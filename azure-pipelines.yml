trigger:
  branches:
    include:
    - main
  paths:
   include:
     - 'azure-pipelines.yml'
     - 'tasks/**/*'

jobs:
# JOB 1
  - job: Akeyless_Custom
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: AzureCLI@2
      name: 'AzureCLI'
      inputs:
        azureSubscription: 'Azure MSA Account'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $JWT=$(az account get-access-token --query accessToken --output tsv)
          echo "##vso[task.setvariable variable=azure_jwt;isoutput=true;issecret=true]$JWT"
      displayName: 'Get JWT from Azure Service Principal'

    # Static Secrets test
    - task: akeyless-secrets@1
      name: 'AkeylessStatic'
      inputs:
        accessid: 'p-sxfgaph9urt4om'
        azureJwt: '$(AzureCLI.azure_jwt)'
        staticSecrets: '{"/progress/TELERIK_NUGET_KEY":"nuget_key", "/docker/DOCKER_HUB_USERNAME":"docker_hub_un", "/apple/lance-apple-account-username":"apple_acct_un"}'
      displayName: 'Get Static Secrets'

    - powershell: |
        Write-Host "Output 1 (nuget_key): $(AkeylessStatic.nuget_key)"
        Write-Host "Output 2 (docker_hub_un): $(AkeylessStatic.docker_hub_un)"
        Write-Host "Output 3 (apple_acct_un): $(AkeylessStatic.apple_acct_un)"
      displayName: 'Check Static Secret'

    # Dynamic secrets tests

    - task: akeyless-secrets@1
      name: 'AkeylessSqlDynamic'
      inputs:
        accessid: 'p-sxfgaph9urt4om'
        azureJwt: '$(AzureCLI.azure_jwt)'
        dynamicSecrets: '{"/az-dvlup-sqlsrvsecret":"sql_dynamic_secret"}'
        timeout: 30
      displayName: 'Get SQL Dynamic Secrets'

    - task: akeyless-secrets@1
      name: 'AkeylessEntraDynamic'
      inputs:
        accessid: 'p-sxfgaph9urt4om'
        azureJwt: '$(AzureCLI.azure_jwt)'
        dynamicSecrets: '{"/entra-id-live":"entra_dynamic_secret"}'
        timeout: 30
      displayName: 'Get Entra ID Dynamic Secrets'


# Verify Outputs
    - powershell: |
        try {
          Write-Host "Verifying the automatic generation of individual outputs"
          Write-Output "$(AkeylessSqlDynamic.id)"
          Write-Output "$(AkeylessSqlDynamic.password)"
          Write-Output "$(AkeylessSqlDynamic.ttl_in_minutes)"
          Write-Output "$(AkeylessSqlDynamic.user)"
        } catch {
            Write-Output "Failed read the automatically generated outputs: $($_.Exception.Message)"
        }
      displayName: 'Check SQL Individual Outputs'

    - powershell: |
        try {
          Write-Host "Verifying the automatic generation of individual outputs"
          Write-Output "$(AkeylessEntraDynamic.id_secret_name)"
          Write-Output "$(AkeylessEntraDynamic.id_secret_key_id)"
          Write-Output "$(AkeylessEntraDynamic.msg)"
          Write-Output "$(AkeylessEntraDynamic.secret_appId)"
          Write-Output "$(AkeylessEntraDynamic.secret_displayName)"
          Write-Output "$(AkeylessEntraDynamic.secret_endDateTime)"
          Write-Output "$(AkeylessEntraDynamic.secret_keyId)"
          Write-Output "$(AkeylessEntraDynamic.secret_secretText)"
          Write-Output "$(AkeylessEntraDynamic.secret_tenantId)"
          Write-Output "$(AkeylessEntraDynamic.ttl_in_minutes)"
        } catch {
            Write-Output "Failed read the automatically generated outputs: $($_.Exception.Message)"
        }
      displayName: 'Check Entra ID Individual Outputs'

    - powershell: |
        try {
            $sql = $env:DYNAMIC_SECRET_JSON | ConvertFrom-Json
            Write-Host "Successfully parsed JSON. Available properties: $($sql.PSObject.Properties.Name -join ', ')"

            Write-Host "user: $sql.user"
            Write-Host "password: $sql.password"
            Write-Host "ttl_in_minute: $sql.ttl_in_minute"
            Write-Host "id: $sql.id"
        } catch {
            Write-Output "Failed to parse SQL dynamic secret JSON: $($_.Exception.Message)"
        }
      displayName: 'Check SQL JSON output'
      env:
        # THIS IS IMPORTANT - I you try to use the json directly in the script, it will fail because of the parens in the variable name
        DYNAMIC_SECRET_JSON: $(AkeylessSqlDynamic.sql_dynamic_secret)

    - powershell: |
        try {
            $entra = $env:DYNAMIC_SECRET_JSON | ConvertFrom-Json
            Write-Host "Successfully parsed JSON. Available properties: $($entra.PSObject.Properties.Name -join ', ')"

            Write-Host "keyId: $($entra.secret.keyId)"
            Write-Host "appId: $($entra.secret.appId)"
            Write-Host "tenantId: $($entra.secret.tenantId)"
            Write-Host "secretText: $($entra.secret.secretText)"
            Write-Host "endDateTime: $($entra.secret.endDateTime)"
        } catch {
            Write-Output "Failed to parse Entra dynamic secret JSON: $($_.Exception.Message)"
        }
      displayName: 'Check Entra Id JSON output'
      env:
        # IMPORTANT: Using the env var to avoid issues with parens in the variable name
        DYNAMIC_SECRET_JSON: $(AkeylessEntraDynamic.entra_dynamic_secret)


# Job 2 - Uses Akeyless's action as  https://marketplace.visualstudio.com/items?itemName=Akeyless-Engineering.akeyless-secrets-management
  # - job: Akeyless_Official
  #   pool:
  #     vmImage: 'windows-latest'
  #   steps:
  #   # Get JWT from Azure Service Principal so we can use it for the akeyless-auth@0 task
  #   - task: AzureCLI@2
  #     name: 'AzureCLI'
  #     inputs:
  #       azureSubscription: 'Azure MSA Account'
  #       scriptType: ps
  #       scriptLocation: inlineScript
  #       inlineScript: |
  #         $JWT=$(az account get-access-token --query accessToken --output tsv)
  #         echo "##vso[task.setvariable variable=azure_jwt;isoutput=true;issecret=true]$JWT"
  #     displayName: 'Get JWT from Azure Service Principal'

  #   # Important: The 'connectedServiceName` is a service you've added in your AzDO project settings. It simply holds your Akeyless Access ID (ex. 'p-xxxxxxx').
  #   # Once you have a valid Akeyless token, you can use it to retrieve static and dynamic secrets later
  #   - task: akeyless-auth@0
  #     name: AkeylessAuth
  #     inputs:
  #       connectedServiceName: 'PersonalAkeylessVault'
  #       jwt: '$(AzureCLI.azure_jwt)'
  #     displayName: 'Get Akeyless Access Token'

  #   # Static secrets retrieval

  #   - task: akeyless-get-secrets-value-task@0
  #     inputs:
  #       connectedServiceName: 'PersonalAkeylessVault'
  #       token: '$(AkeylessAuth.akeylessToken)'
  #       secretsPaths: 'nuget_key=/progress/TELERIK_NUGET_KEY,my_cool_secret=/samples/azdo-test-secret'
  #     displayName: 'Get Static Secrets'

  #   - powershell: |
  #       echo "---------------------------------------------"
  #       echo "Static secrets can simply be referenced by the"
  #       echo "output variable name you set in the task input."
  #       echo "---------------------------------------------"
        
  #       echo "Verifying static secrets..."
  #       echo "nuget_key: $(nuget_key)"
  #       echo "my_cool_secret: $(my_cool_secret)"
  #     displayName: 'Checking static Secrets'

  #   # Dynamic secrets retrieval

  #   - task: akeyless-get-dynamic-secret-value-task@0
  #     name: AkeylessSqlDynamic
  #     inputs:
  #       connectedServiceName: 'PersonalAkeylessVault'
  #       token: '$(AkeylessAuth.akeylessToken)'
  #       name: '/az-dvlup-sqlsrvsecret'
  #       timeout: 30
  #     displayName: 'Get SQL Dynamic Secret'

  #   - powershell: |
  #       echo "Verifying SQL dynamic secret..."
  #       echo "$(AkeylessSqlDynamic.dynamicSecretValue)"
  #     displayName: 'Checking Secrets'

  #   - task: akeyless-get-dynamic-secret-value-task@0
  #     name: AkeylessEntraDynamic
  #     inputs:
  #       connectedServiceName: 'PersonalAkeylessVault'
  #       token: '$(AkeylessAuth.akeylessToken)'
  #       name: '/entra-id-live'
  #       timeout: 30
  #     displayName: 'Get Entra ID Dynamic Secret'

  #   - powershell: |
  #       echo "Verifying Entra Id dynamic secret..."
  #       echo "$(AkeylessEntraDynamic.dynamicSecretValue)"
  #     displayName: 'Checking Secrets'

