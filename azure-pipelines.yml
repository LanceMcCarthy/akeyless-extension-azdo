trigger:
  branches:
    include:
    - main
  paths:
   include:
     - 'azure-pipelines.yml'
     - 'tasks/**/*'

jobs:
  - job: GetAkeylessSecrets
    displayName: 'Get Akeyless Secrets'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: AzureCLI@2
      name: 'AzureCLI'
      inputs:
        azureSubscription: 'Azure MSA Account'
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $JWT=$(az account get-access-token --query accessToken --output tsv)
          echo "##vso[task.setvariable variable=azure_jwt;isoutput=true;issecret=true]$JWT"
      displayName: 'Get JWT from Azure Service Principal'

    # Static Secrets test
    - task: akeyless-secrets@1
      name: 'AkeylessStatic'
      inputs:
        accessid: 'p-sxfgaph9urt4om'
        azureJwt: '$(AzureCLI.azure_jwt)'
        staticSecrets: '{"/progress/TELERIK_NUGET_KEY":"nuget_key", "/docker/DOCKER_HUB_USERNAME":"docker_hub_un", "/apple/lance-apple-account-username":"apple_acct_un"}'
      displayName: 'Get Static Secrets'

    - powershell: |
        Write-Host "Output 1 (nuget_key): $(AkeylessStatic.nuget_key)"
        Write-Host "Output 2 (docker_hub_un): $(AkeylessStatic.docker_hub_un)"
        Write-Host "Output 3 (apple_acct_un): $(AkeylessStatic.apple_acct_un)"
      displayName: 'Check Static Secret'

    # Dynamic secrets tests

    - task: akeyless-secrets@1
      name: 'AkeylessSqlDynamic'
      inputs:
        accessid: 'p-sxfgaph9urt4om'
        azureJwt: '$(AzureCLI.azure_jwt)'
        dynamicSecrets: '{"/az-dvlup-sqlsrvsecret":"sql_dynamic_secret"}'
        timeout: 30
      displayName: 'Get SQL Dynamic Secrets'

    - task: akeyless-secrets@1
      name: 'AkeylessEntraDynamic'
      inputs:
        accessid: 'p-sxfgaph9urt4om'
        azureJwt: '$(AzureCLI.azure_jwt)'
        dynamicSecrets: '{"/entra-id-live":"entra_dynamic_secret"}'
        timeout: 30
      displayName: 'Get Entra ID Dynamic Secrets'

# Verify Outputs
    - powershell: |
        try {
          Write-Host "Verifying the automatic generation of individual outputs"
          Write-Output "$(AkeylessSqlDynamic.id)"
          Write-Output "$(AkeylessSqlDynamic.password)"
          Write-Output "$(AkeylessSqlDynamic.ttl_in_minutes)"
          Write-Output "$(AkeylessSqlDynamic.user)"
        } catch {
            Write-Output "Failed read the automatically generated outputs: $($_.Exception.Message)"
        }
      displayName: 'Autogen: Check SQL Individual Outputs'

    - powershell: |
        try {
          Write-Host "Verifying the automatic generation of individual outputs"
          Write-Output "id_secret_name: $(AkeylessEntraDynamic.id_secret_name)"
          Write-Output "id_secret_key_id: $(AkeylessEntraDynamic.id_secret_key_id)"
          Write-Output "msg: $(AkeylessEntraDynamic.msg)"
          Write-Output "secret_appId: $(AkeylessEntraDynamic.secret_appId)"
          Write-Output "secret_displayName: $(AkeylessEntraDynamic.secret_displayName)"
          Write-Output "secret_endDateTime: $(AkeylessEntraDynamic.secret_endDateTime)"
          Write-Output "secret_keyId: $(AkeylessEntraDynamic.secret_keyId)"
          Write-Output "secret_secretText: $(AkeylessEntraDynamic.secret_secretText)"
          Write-Output "secret_tenantId: $(AkeylessEntraDynamic.secret_tenantId)"
          Write-Output "ttl_in_minutes: $(AkeylessEntraDynamic.ttl_in_minutes)"
        } catch {
            Write-Output "Failed read the automatically generated outputs: $($_.Exception.Message)"
        }
      displayName: 'Autogen: Check Entra ID Individual Outputs'

    - powershell: |
        try {
            $sql = $env:DYNAMIC_SECRET_JSON | ConvertFrom-Json
            Write-Host "Successfully parsed JSON. Available properties: $($sql.PSObject.Properties.Name -join ', ')"

            Write-Host "user: $($sql.user)"
            Write-Host "password: $($sql.password)"
            Write-Host "ttl_in_minute: $($sql.ttl_in_minute)"
            Write-Host "id: $($sql.id)"
        } catch {
            Write-Output "Failed to parse SQL dynamic secret JSON: $($_.Exception.Message)"
        }
      displayName: 'Parse: Check SQL JSON output'
      env:
        # THIS IS IMPORTANT - I you try to use the json directly in the script, it will fail because of the parens in the variable name
        DYNAMIC_SECRET_JSON: $(AkeylessSqlDynamic.sql_dynamic_secret)

    - powershell: |
        try {
            $entra = $env:DYNAMIC_SECRET_JSON | ConvertFrom-Json
            Write-Host "Successfully parsed JSON. Available properties: $($entra.PSObject.Properties.Name -join ', ')"

            Write-Host "keyId: $($entra.secret.keyId)"
            Write-Host "appId: $($entra.secret.appId)"
            Write-Host "tenantId: $($entra.secret.tenantId)"
            Write-Host "secretText: $($entra.secret.secretText)"
            Write-Host "endDateTime: $($entra.secret.endDateTime)"
        } catch {
            Write-Output "Failed to parse Entra dynamic secret JSON: $($_.Exception.Message)"
        }
      displayName: 'Parse: Check Entra Id JSON output'
      env:
        # IMPORTANT: Using the env var to avoid issues with parens in the variable name
        DYNAMIC_SECRET_JSON: $(AkeylessEntraDynamic.entra_dynamic_secret)
